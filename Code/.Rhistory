c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(xlab=expression(H), ylab=expression(C)) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c2x, y=c2y), size=2, color="gray") +
geom_line(aes(x=c1x, c1y), size=2, color="gray")
print(p)
return(p)
}
#Vai adicionando os pontos de Entropia e Complexidade no Plano HC
###IMPORTANTE: ESTA FUNÇÃO É ACUMULATIVA, SEMPRE IRÁ ADIOCIONAR PONTOS. PARA REFAZER ALGUMA ADIÇÃO É NECESSÁRIO CHAMAR NOVAMENTE A FUNÇÃO "cotas(dimension)"
HCPlane <- function(p, Entropy.Complexity, dimension, want_dotted){
if(want_dotted == 1 && dim(Entropy.Complexity)[1] > 1){
init = 1
end = dim(Entropy.Complexity)[1]
p = p +
geom_segment(aes(x=Entropy.Complexity$Entropy[init:(end - 1)],
xend=Entropy.Complexity$Entropy[(init + 1):end],
y=Entropy.Complexity$Complexity[init:(end - 1)],
yend=Entropy.Complexity$Complexity[(init + 1):end]), linetype="dotted")
}
p = p +
geom_point(aes(x = Entropy.Complexity$Entropy, y = Entropy.Complexity$Complexity)
# ,shape = Entropy.Complexity$Shape, color = Entropy.Complexity$rainbow_colors, size = 2
)
print(p)
return(p)
}
#Variables
n <- 10^4
D <- c(3,4,5,6)
Tau <- c(1,2,3,4,5)
TN <- 50000
#f^-k
set.seed(seed = 1234567890, kind = "Mersenne-Twister")
x <- rnorm(n)
x <- x - mean(x)
pp <- planFFT(n)
y <- FFT(x, plan=pp)
fk <- series_generator_fk(pp, y, TN, k = 0)
#qplot(x=c(1:length(serie_fk)), y=serie_fk, geom="line", color=I(rainbow_colors[1]), xlab="n", ylab="") + ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
series_fk <- matrix(ncol = length(fk)/100, nrow = 100)
interval <- seq(1, length(fk), by = 100)
for(i in c(1:length(interval))){
series_fk[i,] = fk[interval[i]:(interval[i]+99)]
}
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[1], Tau[5])
#p <- cotas(D[1])
#HCPlane(p, fk.Entropy.Complexity, D[1], 0)
#Anderson-Darling test for multivariate normality
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
require(fftw)
require(mvnTest)
require(MASS)
require(plotly)
# Paleta montada a partir de https://coolors.co/
rainbow_colors <- palette(c("#494947", #DarkGreen
"#7494EA", #MutedDarkBlue
"#B14AED", #Violet
"#44CCFF", #BrightLightBlue
"#35FF69", #BrightGreen
"#ED8438", #Orange
"#E7AD99", #Pink
"#C18C5D", #LightBrown
"#BF6F00", #DarkYellow
"#FB4D3D", #BrightRed
"#495867") #DarkGray
)
#Função geradora da série f^⁻k
series_generator_fk <- function(pp, y, n, k){
Series <- vector(mode="numeric")
filtro <- (1:n)^-(k/2)
filtro <- filtro / sum(filtro)
y1 <- y * filtro
x1 <- IFFT(y1, plan=pp)
Series <- c(Re(x1))
Series
}
Entropy.complexity.values <- function(series, dimension, delay){
size = dim(series)[2]
Complexity <- Entropy <- rep(0,size)
distributions <- matrix(nrow = factorial(dimension), ncol = size)
for(i in 1:size){
distributions[,i] = distribution(series[,i], dimension, delay)
Entropy[i] = shannonNormalized(distributions[,i])
Complexity[i] = Ccomplexity(distributions[,i])
}
Entropy.Complexity <- data.frame(Entropy, Complexity)
Entropy.Complexity
}
#Plota as cotas do Plano HC
cotas <- function(dimension){
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(xlab=expression(H), ylab=expression(C)) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c2x, y=c2y), size=2, color="gray") +
geom_line(aes(x=c1x, c1y), size=2, color="gray")
print(p)
return(p)
}
#Vai adicionando os pontos de Entropia e Complexidade no Plano HC
###IMPORTANTE: ESTA FUNÇÃO É ACUMULATIVA, SEMPRE IRÁ ADIOCIONAR PONTOS. PARA REFAZER ALGUMA ADIÇÃO É NECESSÁRIO CHAMAR NOVAMENTE A FUNÇÃO "cotas(dimension)"
HCPlane <- function(p, Entropy.Complexity, dimension, want_dotted){
if(want_dotted == 1 && dim(Entropy.Complexity)[1] > 1){
init = 1
end = dim(Entropy.Complexity)[1]
p = p +
geom_segment(aes(x=Entropy.Complexity$Entropy[init:(end - 1)],
xend=Entropy.Complexity$Entropy[(init + 1):end],
y=Entropy.Complexity$Complexity[init:(end - 1)],
yend=Entropy.Complexity$Complexity[(init + 1):end]), linetype="dotted")
}
p = p +
geom_point(aes(x = Entropy.Complexity$Entropy, y = Entropy.Complexity$Complexity)
# ,shape = Entropy.Complexity$Shape, color = Entropy.Complexity$rainbow_colors, size = 2
)
print(p)
return(p)
}
#Variables
n <- 10^4
D <- c(3,4,5,6)
Tau <- c(1,2,3,4,5)
TN <- 50000
#f^-k
set.seed(seed = 1234567890, kind = "Mersenne-Twister")
x <- rnorm(n)
x <- x - mean(x)
pp <- planFFT(n)
y <- FFT(x, plan=pp)
fk <- series_generator_fk(pp, y, TN, k = 0)
#qplot(x=c(1:length(serie_fk)), y=serie_fk, geom="line", color=I(rainbow_colors[1]), xlab="n", ylab="") + ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
series_fk <- matrix(ncol = length(fk)/100, nrow = 100)
interval <- seq(1, length(fk), by = 100)
for(i in c(1:length(interval))){
series_fk[i,] = fk[interval[i]:(interval[i]+99)]
}
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[1], Tau[1])
#p <- cotas(D[1])
#HCPlane(p, fk.Entropy.Complexity, D[1], 0)
#Anderson-Darling test for multivariate normality
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print(i*j)
}
}
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print((i*j) + j)
}
}
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print((i*j) + j - 1)
}
}
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print(i*j)
}
}
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print(j + ((i*5)-1))
}
}
for(i in c(1:4)){
for(j in c(1:5)){
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
print(j + (i-1)*5)
}
}
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
write.csv(density, file = aa[j + (i-1)*5])
}
}
require(fftw)
require(mvnTest)
require(MASS)
require(plotly)
# Paleta montada a partir de https://coolors.co/
rainbow_colors <- palette(c("#494947", #DarkGreen
"#7494EA", #MutedDarkBlue
"#B14AED", #Violet
"#44CCFF", #BrightLightBlue
"#35FF69", #BrightGreen
"#ED8438", #Orange
"#E7AD99", #Pink
"#C18C5D", #LightBrown
"#BF6F00", #DarkYellow
"#FB4D3D", #BrightRed
"#495867") #DarkGray
)
#Função geradora da série f^⁻k
series_generator_fk <- function(pp, y, n, k){
Series <- vector(mode="numeric")
filtro <- (1:n)^-(k/2)
filtro <- filtro / sum(filtro)
y1 <- y * filtro
x1 <- IFFT(y1, plan=pp)
Series <- c(Re(x1))
Series
}
Entropy.complexity.values <- function(series, dimension, delay){
size = dim(series)[2]
Complexity <- Entropy <- rep(0,size)
distributions <- matrix(nrow = factorial(dimension), ncol = size)
for(i in 1:size){
distributions[,i] = distribution(series[,i], dimension, delay)
Entropy[i] = shannonNormalized(distributions[,i])
Complexity[i] = Ccomplexity(distributions[,i])
}
Entropy.Complexity <- data.frame(Entropy, Complexity)
Entropy.Complexity
}
#Plota as cotas do Plano HC
cotas <- function(dimension){
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(xlab=expression(H), ylab=expression(C)) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c2x, y=c2y), size=2, color="gray") +
geom_line(aes(x=c1x, c1y), size=2, color="gray")
print(p)
return(p)
}
#Vai adicionando os pontos de Entropia e Complexidade no Plano HC
###IMPORTANTE: ESTA FUNÇÃO É ACUMULATIVA, SEMPRE IRÁ ADIOCIONAR PONTOS. PARA REFAZER ALGUMA ADIÇÃO É NECESSÁRIO CHAMAR NOVAMENTE A FUNÇÃO "cotas(dimension)"
HCPlane <- function(p, Entropy.Complexity, dimension, want_dotted){
if(want_dotted == 1 && dim(Entropy.Complexity)[1] > 1){
init = 1
end = dim(Entropy.Complexity)[1]
p = p +
geom_segment(aes(x=Entropy.Complexity$Entropy[init:(end - 1)],
xend=Entropy.Complexity$Entropy[(init + 1):end],
y=Entropy.Complexity$Complexity[init:(end - 1)],
yend=Entropy.Complexity$Complexity[(init + 1):end]), linetype="dotted")
}
p = p +
geom_point(aes(x = Entropy.Complexity$Entropy, y = Entropy.Complexity$Complexity)
# ,shape = Entropy.Complexity$Shape, color = Entropy.Complexity$rainbow_colors, size = 2
)
print(p)
return(p)
}
#Variables
n <- 10^4
D <- c(3,4,5,6)
Tau <- c(1,2,3,4,5)
TN <- 50000
#f^-k
set.seed(seed = 1234567890, kind = "Mersenne-Twister")
x <- rnorm(n)
x <- x - mean(x)
pp <- planFFT(n)
y <- FFT(x, plan=pp)
fk <- series_generator_fk(pp, y, TN, k = 0)
#qplot(x=c(1:length(serie_fk)), y=serie_fk, geom="line", color=I(rainbow_colors[1]), xlab="n", ylab="") + ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
series_fk <- matrix(ncol = length(fk)/100, nrow = 100)
interval <- seq(1, length(fk), by = 100)
for(i in c(1:length(interval))){
series_fk[i,] = fk[interval[i]:(interval[i]+99)]
}
aa <- c("D1T1.csv", "D1T2.csv", "D1T3.csv", "D1T4.csv", "D1T5.csv", "D2T1.csv", "D2T2.csv",
"D2T3.csv", "D2T4.csv", "D2T5.csv", "D3T1.csv", "D3T2.csv", "D3T3.csv", "D3T4.csv",
"D3T5.csv", "D4T1.csv", "D4T2.csv", "D4T3.csv", "D4T4.csv", "D4T5.csv", "D5T1.csv",
"D5T2.csv", "D5T3.csv", "D5T4.csv", "D5T5.csv")
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
write.csv(density, file = aa[j + (i-1)*5])
print(j + (i-1)*5)
}
}
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[1], Tau[1])
#p <- cotas(D[1])
#HCPlane(p, fk.Entropy.Complexity, D[1], 0)
#Anderson-Darling test for multivariate normality
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
#plot_ly(x = dens$x,
#        y = dens$y,
#        z = dens$z) %>% add_surface()
Sys.setenv("plotly_username"="EduardaChagas")
Sys.setenv("plotly_api_key"="noritmo123")
require(fftw)
require(mvnTest)
require(MASS)
require(plotly)
Sys.setenv("plotly_username"="EduardaChagas")
Sys.setenv("plotly_api_key"="noritmo123")
# Paleta montada a partir de https://coolors.co/
rainbow_colors <- palette(c("#494947", #DarkGreen
"#7494EA", #MutedDarkBlue
"#B14AED", #Violet
"#44CCFF", #BrightLightBlue
"#35FF69", #BrightGreen
"#ED8438", #Orange
"#E7AD99", #Pink
"#C18C5D", #LightBrown
"#BF6F00", #DarkYellow
"#FB4D3D", #BrightRed
"#495867") #DarkGray
)
#Função geradora da série f^⁻k
series_generator_fk <- function(pp, y, n, k){
Series <- vector(mode="numeric")
filtro <- (1:n)^-(k/2)
filtro <- filtro / sum(filtro)
y1 <- y * filtro
x1 <- IFFT(y1, plan=pp)
Series <- c(Re(x1))
Series
}
Entropy.complexity.values <- function(series, dimension, delay){
size = dim(series)[2]
Complexity <- Entropy <- rep(0,size)
distributions <- matrix(nrow = factorial(dimension), ncol = size)
for(i in 1:size){
distributions[,i] = distribution(series[,i], dimension, delay)
Entropy[i] = shannonNormalized(distributions[,i])
Complexity[i] = Ccomplexity(distributions[,i])
}
Entropy.Complexity <- data.frame(Entropy, Complexity)
Entropy.Complexity
}
#Plota as cotas do Plano HC
cotas <- function(dimension){
c1x = readingMPR(dimension,1)
c1y = readingMPR(dimension,2)
c2x = readingMPR(dimension,3)
c2y = readingMPR(dimension,4)
p = qplot(xlab=expression(H), ylab=expression(C)) +
theme(plot.title = element_text(hjust=0.5)) +
geom_line(aes(x=c2x, y=c2y), size=2, color="gray") +
geom_line(aes(x=c1x, c1y), size=2, color="gray")
print(p)
return(p)
}
#Vai adicionando os pontos de Entropia e Complexidade no Plano HC
###IMPORTANTE: ESTA FUNÇÃO É ACUMULATIVA, SEMPRE IRÁ ADIOCIONAR PONTOS. PARA REFAZER ALGUMA ADIÇÃO É NECESSÁRIO CHAMAR NOVAMENTE A FUNÇÃO "cotas(dimension)"
HCPlane <- function(p, Entropy.Complexity, dimension, want_dotted){
if(want_dotted == 1 && dim(Entropy.Complexity)[1] > 1){
init = 1
end = dim(Entropy.Complexity)[1]
p = p +
geom_segment(aes(x=Entropy.Complexity$Entropy[init:(end - 1)],
xend=Entropy.Complexity$Entropy[(init + 1):end],
y=Entropy.Complexity$Complexity[init:(end - 1)],
yend=Entropy.Complexity$Complexity[(init + 1):end]), linetype="dotted")
}
p = p +
geom_point(aes(x = Entropy.Complexity$Entropy, y = Entropy.Complexity$Complexity)
# ,shape = Entropy.Complexity$Shape, color = Entropy.Complexity$rainbow_colors, size = 2
)
print(p)
return(p)
}
#Variables
n <- 10^4
D <- c(3,4,5,6)
Tau <- c(1,2,3,4,5)
TN <- 50000
#f^-k
set.seed(seed = 1234567890, kind = "Mersenne-Twister")
x <- rnorm(n)
x <- x - mean(x)
pp <- planFFT(n)
y <- FFT(x, plan=pp)
fk <- series_generator_fk(pp, y, TN, k = 0)
#qplot(x=c(1:length(serie_fk)), y=serie_fk, geom="line", color=I(rainbow_colors[1]), xlab="n", ylab="") + ggtitle("White Noise") + theme(plot.title = element_text(hjust=0.5))
series_fk <- matrix(ncol = length(fk)/100, nrow = 100)
interval <- seq(1, length(fk), by = 100)
for(i in c(1:length(interval))){
series_fk[i,] = fk[interval[i]:(interval[i]+99)]
}
aa <- c("D1T1.csv", "D1T2.csv", "D1T3.csv", "D1T4.csv", "D1T5.csv", "D2T1.csv", "D2T2.csv",
"D2T3.csv", "D2T4.csv", "D2T5.csv", "D3T1.csv", "D3T2.csv", "D3T3.csv", "D3T4.csv",
"D3T5.csv", "D4T1.csv", "D4T2.csv", "D4T3.csv", "D4T4.csv", "D4T5.csv", "D5T1.csv",
"D5T2.csv", "D5T3.csv", "D5T4.csv", "D5T5.csv")
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
api_create(p, filename = aa[j + (i-1)*5])
print(j + (i-1)*5)
}
}
#fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[1], Tau[1])
#p <- cotas(D[1])
#HCPlane(p, fk.Entropy.Complexity, D[1], 0)
#Anderson-Darling test for multivariate normality
#ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
#dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
#density <- data.frame(x= dens$x, y = dens$y, z = dens$z)
#write.csv(density, file = "D2_T1.csv")
aa <- c("D1T1.csv", "D1T2.csv", "D1T3.csv", "D1T4.csv", "D1T5.csv", "D2T1.csv", "D2T2.csv",
"D2T3.csv", "D2T4.csv", "D2T5.csv", "D3T1.csv", "D3T2.csv", "D3T3.csv", "D3T4.csv",
"D3T5.csv", "D4T1.csv", "D4T2.csv", "D4T3.csv", "D4T4.csv", "D4T5.csv", "D5T1.csv",
"D5T2.csv", "D5T3.csv", "D5T4.csv", "D5T5.csv")
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
p <-plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
options(browser = 'false')
api_create(p, filename = aa[j + (i-1)*5])
print(j + (i-1)*5)
}
}
Sys.setenv("plotly_username"="EduardaChagas")
Sys.setenv("plotly_api_key"="noritmo123")
aa <- c("D1T1.csv", "D1T2.csv", "D1T3.csv", "D1T4.csv", "D1T5.csv", "D2T1.csv", "D2T2.csv",
"D2T3.csv", "D2T4.csv", "D2T5.csv", "D3T1.csv", "D3T2.csv", "D3T3.csv", "D3T4.csv",
"D3T5.csv", "D4T1.csv", "D4T2.csv", "D4T3.csv", "D4T4.csv", "D4T5.csv", "D5T1.csv",
"D5T2.csv", "D5T3.csv", "D5T4.csv", "D5T5.csv")
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
p <-plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
options(browser = 'false')
api_create(p, filename = aa[j + (i-1)*5])
print(j + (i-1)*5)
}
}
Sys.setenv("plotly_username"="EduardaChagas")
Sys.setenv("plotly_api_key"="nfdmkPhHqEwkznu61CZh")
aa <- c("D1T1.csv", "D1T2.csv", "D1T3.csv", "D1T4.csv", "D1T5.csv", "D2T1.csv", "D2T2.csv",
"D2T3.csv", "D2T4.csv", "D2T5.csv", "D3T1.csv", "D3T2.csv", "D3T3.csv", "D3T4.csv",
"D3T5.csv", "D4T1.csv", "D4T2.csv", "D4T3.csv", "D4T4.csv", "D4T5.csv", "D5T1.csv",
"D5T2.csv", "D5T3.csv", "D5T4.csv", "D5T5.csv")
for(i in c(1:4)){
for(j in c(1:5)){
fk.Entropy.Complexity <- Entropy.complexity.values(series_fk, D[i], Tau[j])
ad <- AD.test(fk.Entropy.Complexity) #Result  : Data are not multivariate normal (sig.level = 0.05)
dens <- kde2d(fk.Entropy.Complexity$Entropy, fk.Entropy.Complexity$Complexity)
p <-plot_ly(x = dens$x,
y = dens$y,
z = dens$z) %>% add_surface()
options(browser = 'false')
api_create(p, filename = aa[j + (i-1)*5])
print(j + (i-1)*5)
}
}
