}
n_symbols = n_symbols + 1
i = first + delay
}else break
}
for(i in 1:(n_symbols-1)){
aux = duplicated(elements[i,])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated != 0){
aux = duplicated(elements[i,order(elements[i,])])
init = which(aux==TRUE)[1] - 1
end = init + isDuplicated
myresult = mypermute(patterns[i,],init,end)
myp = rep(0,dim(myresult)[1])
mysum = 0
for(w in 1:dim(myresult)[1]){
for(j in 1:fat){
if(all(myresult[w,] == symbols[j,])){
mysum = mysum + p1[j]
myp[w] = j
break
}
}
}
for(w in 1:dim(myresult)[1]){
we[myp[w]] = we[myp[w]] + p1[myp[w]]/mysum
}
}
}
print(we)
print(n_symbols-1)
we = we/(n_symbols-1)
we
}
mypermute<-function(vector, init, end){
a = matrix(unlist(permn(vector[init:end])),nrow = factorial(end-init+1),ncol = end-init+1,byrow = TRUE)
number = dim(a)[1]
result = matrix(nrow = number,ncol = length(vector))
for(i in 1:number){
if(1 < init){  result[i,1:(init-1)] = vector[1:(init-1)]}
result[i,init:end] = a[i,]
if(end < length(vector)){ result[i,(end+1):length(vector)] = vector[(end+1):length(vector)]}
}
result
}
dd_a8 = dataDriven(a8,3,1)
sum(dd_a8)
dd_a7 = dataDriven(a7,3,1)
sum(dd_a7)
options(digits = 15)
sum(dd_a8)
sum(dd_a7)
dd_a7 = dataDriven2(a7,3,1)
sum(dd_a7)
library(combinat)
library(gtools)
#Calcula todos os possíveis vetores permutados, dado o ínicio e o final da subconjunto que deve ser permutado
mypermute<-function(vector, init, end){
a = matrix(unlist(permn(vector[init:end])),nrow = factorial(end-init+1),ncol = end-init+1,byrow = TRUE)
number = dim(a)[1]
result = matrix(nrow = number,ncol = length(vector))
for(i in 1:number){
if(1 < init){
result[i,1:(init-1)] = vector[1:(init-1)]
}
result[i,init:end] = a[i,]
if(end < length(vector)){
result[i,(end+1):length(vector)] = vector[(end+1):length(vector)]
}
}
result
}
#Calcula a probabilidade dos vetores que não possuem valores duplicados
completeTies <- function(elements,pattern,option){
symbols <- definePatterns(dim(elements)[2])
fat = factorial(dim(elements)[2])
p1 = rep(0,fat)
re = 0
for(i in 1:dim(elements)[1]){
aux = duplicated(elements[i,])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated==0){
re = re + 1
for(j in 1:fat){
if(all(pattern[i,] == symbols[j,])){
p1[j]=p1[j]+1
}
}
}
}
if(option == 0){
return(p1/re)
}else{
return(re)
}
}
dataDriven<-function(series, dimension, delay){
# Step 1: Define the embedding dimension D, that lead to the all possible permutation patterns
patterns <- definePatterns(dimension)
symbols <- definePatterns(dimension)
#Step 2: Map all the vectors and their implementation pattern
#Step 5: Repeat the step 3, bat do not eliminate the vectors with repeated values
mypatterns <- formationPattern(series,dimension, delay,0)
elements <- formationPattern(series,dimension,delay,1)
#Step 3: If there any ties in vectors, eliminate the vector
#Step 4: Calculate the permutation patterns probabilities
prob <- completeTies(elements,mypatterns,0)
#Step 6: If the vector has not equal components, map it to pattern with weigth = 1
weigth = rep(0,dim(symbols)[1])
for(i in 1:dim(elements)[1]){
sumProb = 0
aux = duplicated(elements[i,order(elements[i,])])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated != 0){ #Step 7: If the vector has equal components, break the ties add small pertubations
init = which(aux==TRUE)[1] - 1
end = init + isDuplicated
myresult = mypermute(mypatterns[i,],init,end)
index = rep(0,dim(myresult)[1])
pertubation = 1/dim(myresult)[1]
for(j in 1:dim(myresult)[1]){
for(k in 1:factorial(dimension)){
if(all(myresult[j,] == symbols[k,])){
index[j] = k
break
}
}
}
sumProb = sum(prob[index])
soma = 0
for(j in 1:dim(myresult)[1]){
if(sumProb != 0){
weigth[j] = weigth[j] + (prob[index[j]]/sumProb)
soma = soma + (prob[index[j]]/sumProb)
}
}
}else{
for(k in 1:factorial(dimension)){
if(all(mypatterns[i,] == symbols[k,])){
weigth[k] = weigth[k] + 1
break
}
}
}
}
p = weigth/dim(elements)[1]
if(sum(p)!=1){
r = (1 - sum(p))/factorial(dimension)
p = p + r
}
p
}
dd_a7 = dd(a7,3,1)
dd_a7 = dataDriven2(a7,3,1)
sum(dd_a7)
library(combinat)
library(gtools)
#Calcula todos os possíveis vetores permutados, dado o ínicio e o final da subconjunto que deve ser permutado
mypermute<-function(vector, init, end){
a = matrix(unlist(permn(vector[init:end])),nrow = factorial(end-init+1),ncol = end-init+1,byrow = TRUE)
number = dim(a)[1]
result = matrix(nrow = number,ncol = length(vector))
for(i in 1:number){
if(1 < init){
result[i,1:(init-1)] = vector[1:(init-1)]
}
result[i,init:end] = a[i,]
if(end < length(vector)){
result[i,(end+1):length(vector)] = vector[(end+1):length(vector)]
}
}
result
}
#Calcula a probabilidade dos vetores que não possuem valores duplicados
completeTies <- function(elements,pattern,option){
symbols <- definePatterns(dim(elements)[2])
fat = factorial(dim(elements)[2])
p1 = rep(0,fat)
re = 0
for(i in 1:dim(elements)[1]){
aux = duplicated(elements[i,])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated==0){
re = re + 1
for(j in 1:fat){
if(all(pattern[i,] == symbols[j,])){
p1[j]=p1[j]+1
}
}
}
}
if(option == 0){
return(p1/re)
}else{
return(re)
}
}
dataDriven<-function(series, dimension, delay){
# Step 1: Define the embedding dimension D, that lead to the all possible permutation patterns
patterns <- definePatterns(dimension)
symbols <- definePatterns(dimension)
#Step 2: Map all the vectors and their implementation pattern
#Step 5: Repeat the step 3, bat do not eliminate the vectors with repeated values
mypatterns <- formationPattern(series,dimension, delay,0)
elements <- formationPattern(series,dimension,delay,1)
#Step 3: If there any ties in vectors, eliminate the vector
#Step 4: Calculate the permutation patterns probabilities
prob <- completeTies(elements,mypatterns,0)
#Step 6: If the vector has not equal components, map it to pattern with weigth = 1
weigth = rep(0,dim(symbols)[1])
for(i in 1:dim(elements)[1]){
sumProb = 0
aux = duplicated(elements[i,order(elements[i,])])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated != 0){ #Step 7: If the vector has equal components, break the ties add small pertubations
init = which(aux==TRUE)[1] - 1
end = init + isDuplicated
myresult = mypermute(mypatterns[i,],init,end)
index = rep(0,dim(myresult)[1])
pertubation = 1/dim(myresult)[1]
for(j in 1:dim(myresult)[1]){
for(k in 1:factorial(dimension)){
if(all(myresult[j,] == symbols[k,])){
index[j] = k
break
}
}
}
sumProb = sum(prob[index])
soma = 0
for(j in 1:dim(myresult)[1]){
if(sumProb != 0){
weigth[j] = weigth[j] + (prob[index[j]]/sumProb)
soma = soma + (prob[index[j]]/sumProb)
}
}
}else{
for(k in 1:factorial(dimension)){
if(all(mypatterns[i,] == symbols[k,])){
weigth[k] = weigth[k] + 1
break
}
}
}
}
p = weigth/dim(elements)[1]
if(sum(p)!=1){
r = (1 - sum(p))/factorial(dimension)
p = p + r
}
p
}
dataDriven2(a7,3,1)
library(combinat)
library(gtools)
#Calcula todos os possíveis vetores permutados, dado o ínicio e o final da subconjunto que deve ser permutado
mypermute<-function(vector, init, end){
a = matrix(unlist(permn(vector[init:end])),nrow = factorial(end-init+1),ncol = end-init+1,byrow = TRUE)
number = dim(a)[1]
result = matrix(nrow = number,ncol = length(vector))
for(i in 1:number){
if(1 < init){
result[i,1:(init-1)] = vector[1:(init-1)]
}
result[i,init:end] = a[i,]
if(end < length(vector)){
result[i,(end+1):length(vector)] = vector[(end+1):length(vector)]
}
}
result
}
#Calcula a probabilidade dos vetores que não possuem valores duplicados
completeTies <- function(elements,pattern,option){
symbols <- definePatterns(dim(elements)[2])
fat = factorial(dim(elements)[2])
p1 = rep(0,fat)
re = 0
for(i in 1:dim(elements)[1]){
aux = duplicated(elements[i,])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated==0){
re = re + 1
for(j in 1:fat){
if(all(pattern[i,] == symbols[j,])){
p1[j]=p1[j]+1
}
}
}
}
if(option == 0){
return(p1/re)
}else{
return(re)
}
}
dataDriven<-function(series, dimension, delay){
# Step 1: Define the embedding dimension D, that lead to the all possible permutation patterns
patterns <- definePatterns(dimension)
symbols <- definePatterns(dimension)
#Step 2: Map all the vectors and their implementation pattern
#Step 5: Repeat the step 3, bat do not eliminate the vectors with repeated values
mypatterns <- formationPattern(series,dimension, delay,0)
elements <- formationPattern(series,dimension,delay,1)
#Step 3: If there any ties in vectors, eliminate the vector
#Step 4: Calculate the permutation patterns probabilities
prob <- completeTies(elements,mypatterns,0)
#Step 6: If the vector has not equal components, map it to pattern with weigth = 1
weigth = rep(0,dim(symbols)[1])
for(i in 1:dim(elements)[1]){
sumProb = 0
aux = duplicated(elements[i,order(elements[i,])])
isDuplicated = length(aux[aux==TRUE])
if(isDuplicated != 0){ #Step 7: If the vector has equal components, break the ties add small pertubations
init = which(aux==TRUE)[1] - 1
end = init + isDuplicated
myresult = mypermute(mypatterns[i,],init,end)
index = rep(0,dim(myresult)[1])
pertubation = 1/dim(myresult)[1]
for(j in 1:dim(myresult)[1]){
for(k in 1:factorial(dimension)){
if(all(myresult[j,] == symbols[k,])){
index[j] = k
break
}
}
}
sumProb = sum(prob[index])
soma = 0
for(j in 1:dim(myresult)[1]){
if(sumProb != 0){
weigth[j] = weigth[j] + (prob[index[j]]/sumProb)
soma = soma + (prob[index[j]]/sumProb)
}
}
}else{
for(k in 1:factorial(dimension)){
if(all(mypatterns[i,] == symbols[k,])){
weigth[k] = weigth[k] + 1
break
}
}
}
}
p = weigth/dim(elements)[1]
if(sum(p)!=1){
r = (1 - sum(p))/factorial(dimension)
p = p + r
}
p
}
dataDriven2(a7,3,1)
d7=dataDriven(a7,3,1)
library(combinat)
library(gtools)
definePatterns<-function(dimension){
d = c(1:dimension)
symbol = matrix(unlist(permutations(n=dimension,r=dimension,v=d)),nrow = factorial(dimension),ncol = dimension,byrow = FALSE)
symbol = symbol - 1
symbol
}
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
distribution<-function(serie,dimension,delay){
fat = factorial(dimension)
probability = rep(0,fat)
p_patterns <- formationPattern(serie,dimension,delay,0)
n_symbols <- dim(p_patterns)[1]
symbols <- definePatterns(dimension)
for(i in 1:fat){
for(j in 1:n_symbols){
if(all(p_patterns[j,] == symbols[i,])){
probability[i]=probability[i]+1
}
}
}
probability = probability/n_symbols
probability
}
d7=dataDriven(a7,3,1)
precision <-function(x, casas){
x = round(x*(10^casas))
x
}
#Gera 100.000 dados
set.seed(1234567890, kind = "Mersenne-Twister")
x <- runif(110000)
x <- x[-(1:10000)]
a7 = precision(x,2)
dd_a7 = dataDriven(a7,3,1)
sum(dd_a7)
a8 = precision(x,1)
dd_a8 = dataDriven(a8,3,1)
sum(dd_a8)
setwd("/home/eduarda/Documentos")
library(devtools)
library(roxygen2)
create("DataDriven", rstudio = FALSE)
install.packages("statcomp")
install.packages("statcomp", repos="http://R-Forge.R-project.org")
?duplicated
set.seed(1234567890, kind = "Mersenne-Twister")
x <- runif(110000)
x <- x[-(1:10000)]
definePatterns<-function(dimension){
d = c(1:dimension)
symbol = matrix(unlist(permutations(n=dimension,r=dimension,v=d)),nrow = factorial(dimension),ncol = dimension,byrow = FALSE)
symbol = symbol - 1
symbol
}
formationPattern<-function(serie,dimension,delay,option){
n_symbols = i = 1
n = length(serie)
p_patterns = elements = matrix(nrow=n,ncol=dimension)
index = c(0:(dimension-1))
while(i <= n){
first = i
if((i+dimension-1)<=n){
elements[n_symbols,] = serie[i:(i+dimension-1)]
p_patterns[n_symbols,] = index[order(elements[n_symbols,])]
i = first + delay
n_symbols = n_symbols + 1
}else break
}
if(option == 0){
p_patterns = na.omit(p_patterns)
p_patterns[1:dim(p_patterns)[1],]
}else{
elements = na.omit(elements)
elements[1:dim(elements)[1],]
}
}
distribution<-function(serie,dimension,delay){
fat = factorial(dimension)
probability = rep(0,fat)
p_patterns <- formationPattern(serie,dimension,delay,0)
n_symbols <- dim(p_patterns)[1]
symbols <- definePatterns(dimension)
for(i in 1:fat){
for(j in 1:n_symbols){
if(all(p_patterns[j,] == symbols[i,])){
probability[i]=probability[i]+1
}
}
}
probability = probability/n_symbols
probability
}
definePatterns<-function(dimension){
d = c(1:dimension)
symbol = matrix(unlist(permutations(n=dimension,r=dimension,v=d)),nrow = factorial(dimension),ncol = dimension,byrow = FALSE)
symbol = symbol - 1
symbol
}
definePatterns(3)
getwd()
setwd("/home/eduarda/Documentos/DataDriven/R")
load_all()
?statcomp
??statcomp
?permutations
?sum
?permutations
document()
check_man()
load_all()
document()
check_man()
load_all()
document()
check_man()
check()
use_package("combinat")
use_package("gtools")
check()
load_all()
document()
check_man()
check()
importFrom("stats", "na.omit")
load_all()
document()
check_man()
use_package("stats")
check()
load_all()
document()
check_man()
check()
load_all()
document()
check_man()
check()
build()
